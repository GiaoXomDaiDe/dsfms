generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eid                    String           @db.VarChar(8)
  firstName              String
  middleName             String?
  lastName               String
  address                String?
  email                  String           @db.Citext
  passwordHash           String
  status                 UserStatus       @default(ACTIVE)
  signatureImageUrl      String?
  roleId                 String           @db.Uuid
  gender                 GenderStatus
  avatarUrl              String?
  phoneNumber            String?          @db.VarChar(20)
  departmentId           String?          @db.Uuid
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @default(now()) @updatedAt
  deletedAt              DateTime?
  createdById            String?          @db.Uuid
  updatedById            String?          @db.Uuid
  deletedById            String?          @db.Uuid
  createdDepartments     Department[]     @relation("DeptCreatedBy")
  deletedDepartments     Department[]     @relation("DeptDeletedBy")
  headOfDepartments      Department[]     @relation("DepartmentHead")
  updatedDepartments     Department[]     @relation("DeptUpdatedBy")
  createdPermissions     Permission[]     @relation("PermissionCreatedBy")
  deletedPermissions     Permission[]     @relation("PermissionDeletedBy")
  updatedPermissions     Permission[]     @relation("PermissionUpdatedBy")
  createdRoles           Role[]           @relation("RoleCreatedBy")
  deletedRoles           Role[]           @relation("RoleDeletedBy")
  updatedRoles           Role[]           @relation("RoleUpdatedBy")
  createdTraineeProfiles TraineeProfile[] @relation("TraineeCreatedBy")
  deletedTraineeProfiles TraineeProfile[] @relation("TraineeDeletedBy")
  updatedTraineeProfiles TraineeProfile[] @relation("TraineeUpdatedBy")
  traineeProfile         TraineeProfile?
  createdTrainerProfiles TrainerProfile[] @relation("TrainerCreatedBy")
  deletedTrainerProfiles TrainerProfile[] @relation("TrainerDeletedBy")
  updatedTrainerProfiles TrainerProfile[] @relation("TrainerUpdatedBy")
  trainerProfile         TrainerProfile?
  createdBy              User?            @relation("UserCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  createdUsers           User[]           @relation("UserCreatedBy")
  deletedBy              User?            @relation("UserDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  deletedUsers           User[]           @relation("UserDeletedBy")
  department             Department?      @relation("DepartmentMembers", fields: [departmentId], references: [id], onUpdate: NoAction)
  role                   Role             @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy              User?            @relation("UserUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  updatedUsers           User[]           @relation("UserUpdatedBy")

  @@index([deletedAt])
  @@map("User")
}

model Role {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  createdById String?      @db.Uuid
  updatedById String?      @db.Uuid
  deletedById String?      @db.Uuid
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?        @relation("RoleDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  users       User[]
  permissions Permission[] @relation("PermissionToRole")

  @@index([deletedAt])
  @@map("Role")
}

model Permission {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  method      HttpMethod
  path        String
  name        String
  module      String
  description String?
  createdById String?    @db.Uuid
  updatedById String?    @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  deletedAt   DateTime?
  deletedById String?    @db.Uuid
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  roles       Role[]     @relation("PermissionToRole")

  @@index([deletedAt])
  @@map("Permission")
}

model TrainerProfile {
  userId              String    @id @db.Uuid
  specialization      String
  certificationNumber String?
  yearsOfExp          Int       @default(0)
  bio                 String?
  createdById         String?   @db.Uuid
  updatedById         String?   @db.Uuid
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt
  deletedAt           DateTime?
  deletedById         String?   @db.Uuid
  createdBy           User?     @relation("TrainerCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy           User?     @relation("TrainerDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy           User?     @relation("TrainerUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  user                User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([deletedAt])
  @@map("Trainer_Profile")
}

model TraineeProfile {
  userId         String    @id @db.Uuid
  dob            DateTime
  enrollmentDate DateTime
  trainingBatch  String
  passportNo     String?
  nation         String
  createdById    String?   @db.Uuid
  updatedById    String?   @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?
  deletedById    String?   @db.Uuid
  createdBy      User?     @relation("TraineeCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy      User?     @relation("TraineeDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy      User?     @relation("TraineeUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([deletedAt])
  @@map("Trainee_Profile")
}

model Department {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  headUserId  String?   @db.Uuid
  isActive    Boolean   @default(true)
  createdById String?   @db.Uuid
  updatedById String?   @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  deletedById String?   @db.Uuid
  createdBy   User?     @relation("DeptCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?     @relation("DeptDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  headUser    User?     @relation("DepartmentHead", fields: [headUserId], references: [id], onUpdate: NoAction)
  updatedBy   User?     @relation("DeptUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  users       User[]    @relation("DepartmentMembers")

  @@index([deletedAt])
  @@map("Department")
}

enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

enum GenderStatus {
  MALE
  FEMALE
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
}
