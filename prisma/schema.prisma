generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

enum GenderStatus {
  MALE
  FEMALE
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
}

enum SubjectInstructorRole {
  PRIMARY_INSTRUCTOR
  EXAMINER
  ASSESSMENT_REVIEWER
  ASSISTANT_INSTRUCTOR
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  PLANNED
  ON_GOING
  COMPLETED
  ARCHIVED
}

enum SubjectMethod {
  E_LEARNING
  CLASSROOM
  ERO
}

enum SubjectType {
  UNLIMIT
  RECURRENT
}

enum SubjectEnrollmentStatus {
  ENROLLED
  ON_GOING
  CANCELLED
  FINISHED
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
}

model User {
  id                String       @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  eid               String       @db.VarChar(8)
  firstName         String
  middleName        String?
  lastName          String
  address           String?      @db.Text
  email             String       @db.Citext
  passwordHash      String
  status            UserStatus   @default(ACTIVE)
  signatureImageUrl String?      @db.Text
  roleId            String       @db.Uuid
  gender            GenderStatus
  avatarUrl         String?      @db.Text
  phoneNumber       String?      @db.VarChar(20)
  departmentId      String?      @db.Uuid

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  deletedAt         DateTime?

  createdById       String?      @db.Uuid
  updatedById       String?      @db.Uuid
  deletedById       String?      @db.Uuid

  // Relations
  role        Role        @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department  Department? @relation("DepartmentMembers", fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdBy   User?       @relation("UserCreatedBy", fields: [createdById], references: [id],  onDelete: SetNull, onUpdate: NoAction)
  updatedBy   User?       @relation("UserUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy   User?       @relation("UserDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  // Self-relations backrefs
  createdUsers User[]     @relation("UserCreatedBy")
  updatedUsers User[]     @relation("UserUpdatedBy")
  deletedUsers User[]     @relation("UserDeletedBy")

  // Department relations
  headOfDepartments Department[] @relation("DepartmentHead")

  // Role relations
  createdRoles Role[] @relation("RoleCreatedBy")
  updatedRoles Role[] @relation("RoleUpdatedBy")
  deletedRoles Role[] @relation("RoleDeletedBy")

  // Permission relations
  createdPermissions Permission[] @relation("PermissionCreatedBy")
  updatedPermissions Permission[] @relation("PermissionUpdatedBy")
  deletedPermissions Permission[] @relation("PermissionDeletedBy")

  // TrainerProfile relations
  createdTrainerProfiles TrainerProfile[] @relation("TrainerCreatedBy")
  updatedTrainerProfiles TrainerProfile[] @relation("TrainerUpdatedBy")
  deletedTrainerProfiles TrainerProfile[] @relation("TrainerDeletedBy")

  // TraineeProfile relations
  createdTraineeProfiles TraineeProfile[] @relation("TraineeCreatedBy")
  updatedTraineeProfiles TraineeProfile[] @relation("TraineeUpdatedBy")
  deletedTraineeProfiles TraineeProfile[] @relation("TraineeDeletedBy")

  // Department creation/update relations
  createdDepartments Department[] @relation("DeptCreatedBy")
  updatedDepartments Department[] @relation("DeptUpdatedBy")
  deletedDepartments Department[] @relation("DeptDeletedBy")

  // Profiles
  trainerProfile  TrainerProfile?
  traineeProfile  TraineeProfile?

  // Course relations
  createdCourses Course[] @relation("CourseCreatedBy")
  updatedCourses Course[] @relation("CourseUpdatedBy")
  deletedCourses Course[] @relation("CourseDeletedBy")

  // Subject relations  
  createdSubjects Subject[] @relation("SubjectCreatedBy")
  updatedSubjects Subject[] @relation("SubjectUpdatedBy")
  deletedSubjects Subject[] @relation("SubjectDeletedBy")

  // Subject Instructor relations
  subjectInstructions SubjectInstructor[]

  // Subject Enrollment relations
  subjectEnrollments SubjectEnrollment[]

  @@map("User")
  @@index([deletedAt])
}

model Role {
  id          String      @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?     @db.Text
  isActive    ActiveStatus @default(ACTIVE)
  permissions Permission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  createdById String?  @db.Uuid
  updatedById String?  @db.Uuid
  deletedById String?  @db.Uuid

  createdBy   User?    @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy   User?    @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy   User?    @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  users       User[]
  
  @@map("Role")
  @@index([deletedAt])
}

model Permission {
  id          String     @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  method      HttpMethod
  path        String
  name        String
  module      String
  description String?
  roles       Role[]
  isActive    ActiveStatus @default(ACTIVE)
  viewName   String?     @default("")
  viewModule String?     @default("")
  createdById String?    @db.Uuid
  updatedById String?    @db.Uuid
  deletedById String?    @db.Uuid

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  deletedAt   DateTime?

  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  @@map("Permission")
  @@index([deletedAt])
}

model TrainerProfile {
  userId             String  @id @db.Uuid
  specialization     String
  certificationNumber String?
  yearsOfExp         Int     @default(0)
  bio                String? @db.Text

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy User?  @relation("TrainerCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy User?  @relation("TrainerUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy User?  @relation("TrainerDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("Trainer_Profile")
  @@index([deletedAt])
}

model TraineeProfile {
  userId         String   @id @db.Uuid
  dob            DateTime
  enrollmentDate DateTime
  trainingBatch  String
  passportNo     String?
  nation         String

  createdById String? @db.Uuid
  updatedById String? @db.Uuid
  deletedById String? @db.Uuid

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  user      User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy User?  @relation("TraineeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy User?  @relation("TraineeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy User?  @relation("TraineeDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("Trainee_Profile")
  @@index([deletedAt])
}

model Department {
  id          String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name        String
  code        String   @unique
  description String?  @db.Text
  headUserId  String?     @db.Uuid
  isActive    ActiveStatus @default(ACTIVE)

  createdById String?     @db.Uuid
  updatedById String?  @db.Uuid
  deletedById String?  @db.Uuid

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  headUser  User?  @relation("DepartmentHead", fields: [headUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdBy User?  @relation("DeptCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy User?  @relation("DeptUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy User?  @relation("DeptDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  users     User[] @relation("DepartmentMembers")
  courses   Course[]

  @@map("Department")
  @@index([deletedAt])
}


model Course {
  id             String        @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  departmentId   String        @db.Uuid
  name           String
  description    String?
  code           String        @unique
  maxNumTrainee  Int?
  venue          String?
  note           String?
  passScore      Float?
  startDate      DateTime?
  endDate        DateTime?
  level          CourseLevel
  status         CourseStatus  @default(PLANNED)

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  deletedAt      DateTime?

  createdById    String?       @db.Uuid
  updatedById    String?       @db.Uuid
  deletedById    String?       @db.Uuid

  department     Department    @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subjects       Subject[]
  createdBy      User?         @relation("CourseCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy      User?         @relation("CourseUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy      User?         @relation("CourseDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("Course")
  @@index([departmentId])
  @@index([deletedAt])
}

model Subject {
  id            String        @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  courseId      String        @db.Uuid
  name          String
  code          String        @unique
  description   String?       @db.Text
  method        SubjectMethod
  duration      Int?          // months
  type          SubjectType
  roomName      String?
  remarkNote    String?
  timeSlot      String?
  isSIM         Boolean       @default(false)
  passScore     Float?
  startDate     DateTime?
  endDate       DateTime?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  deletedAt     DateTime?

  createdById   String?       @db.Uuid
  updatedById   String?       @db.Uuid
  deletedById   String?       @db.Uuid

  course        Course        @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  instructors   SubjectInstructor[]
  enrollments   SubjectEnrollment[]
  createdBy     User?         @relation("SubjectCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedBy     User?         @relation("SubjectUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedBy     User?         @relation("SubjectDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("Subject")
  @@index([courseId])
  @@index([deletedAt])
}

model SubjectInstructor {
  trainerUserId   String                 @db.Uuid
  subjectId       String                 @db.Uuid
  roleInSubject   SubjectInstructorRole

  trainer         User                   @relation(fields: [trainerUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subject         Subject                @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt       DateTime               @default(now())

  @@id([trainerUserId, subjectId])
  @@map("Subject_Instructor")
  @@index([subjectId])
  // If you want to prevent duplicate (trainer, subject, role), uncomment:
  // @@unique([trainerUserId, subjectId, roleInSubject])
}
model SubjectEnrollment {
  traineeUserId   String                    @db.Uuid
  subjectId       String                    @db.Uuid
  enrollmentDate  DateTime
  batchCode       String
  status          SubjectEnrollmentStatus    @default(ENROLLED)

  trainee         User                      @relation(fields: [traineeUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subject         Subject                   @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @default(now()) @updatedAt

  @@id([traineeUserId, subjectId])
  @@map("Subject_Enrollment")
  @@index([subjectId])
}