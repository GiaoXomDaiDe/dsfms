generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eid                        String              @unique @db.VarChar(8)
  firstName                  String
  middleName                 String?
  lastName                   String
  address                    String?
  email                      String              @unique @db.Citext
  passwordHash               String
  status                     UserStatus          @default(ACTIVE)
  signatureImageUrl          String?
  roleId                     String              @db.Uuid
  gender                     GenderStatus
  avatarUrl                  String?
  phoneNumber                String?             @db.VarChar(20)
  departmentId               String?             @db.Uuid
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @default(now()) @updatedAt
  deletedAt                  DateTime?
  createdById                String?             @db.Uuid
  updatedById                String?             @db.Uuid
  deletedById                String?             @db.Uuid
  createdCourses             Course[]            @relation("CourseCreatedBy")
  deletedCourses             Course[]            @relation("CourseDeletedBy")
  updatedCourses             Course[]            @relation("CourseUpdatedBy")
  createdDepartments         Department[]        @relation("DeptCreatedBy")
  deletedDepartments         Department[]        @relation("DeptDeletedBy")
  headOfDepartments          Department[]        @relation("DepartmentHead")
  updatedDepartments         Department[]        @relation("DeptUpdatedBy")
  createdGlobalFields        GlobalField[]       @relation("GlobalFieldCreatedBy")
  updatedGlobalFields        GlobalField[]       @relation("GlobalFieldUpdatedBy")
  createdPermissions         Permission[]        @relation("PermissionCreatedBy")
  deletedPermissions         Permission[]        @relation("PermissionDeletedBy")
  updatedPermissions         Permission[]        @relation("PermissionUpdatedBy")
  createdRoles               Role[]              @relation("RoleCreatedBy")
  deletedRoles               Role[]              @relation("RoleDeletedBy")
  updatedRoles               Role[]              @relation("RoleUpdatedBy")
  createdSubjects            Subject[]           @relation("SubjectCreatedBy")
  deletedSubjects            Subject[]           @relation("SubjectDeletedBy")
  updatedSubjects            Subject[]           @relation("SubjectUpdatedBy")
  subjectEnrollments         SubjectEnrollment[]
  subjectInstructions        SubjectInstructor[]
  createdTemplateFields      TemplateField[]     @relation("TemplateFieldCreatedBy")
  updatedTemplateFields      TemplateField[]     @relation("TemplateFieldUpdatedBy")
  createdTemplateForms       TemplateForm[]      @relation("TemplateFormCreatedBy")
  createdTraineeProfiles     TraineeProfile[]    @relation("TraineeCreatedBy")
  deletedTraineeProfiles     TraineeProfile[]    @relation("TraineeDeletedBy")
  updatedTraineeProfiles     TraineeProfile[]    @relation("TraineeUpdatedBy")
  traineeProfile             TraineeProfile?
  createdTrainerProfiles     TrainerProfile[]    @relation("TrainerCreatedBy")
  deletedTrainerProfiles     TrainerProfile[]    @relation("TrainerDeletedBy")
  updatedTrainerProfiles     TrainerProfile[]    @relation("TrainerUpdatedBy")
  trainerProfile             TrainerProfile?
  createdBy                  User?               @relation("UserCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  createdUsers               User[]              @relation("UserCreatedBy")
  deletedBy                  User?               @relation("UserDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  deletedUsers               User[]              @relation("UserDeletedBy")
  department                 Department?         @relation("DepartmentMembers", fields: [departmentId], references: [id], onUpdate: NoAction)
  role                       Role                @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy                  User?               @relation("UserUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  updatedUsers               User[]              @relation("UserUpdatedBy")
  createdRequests            Request[]           @relation("RequestCreatedBy")
  managedRequests            Request[]           @relation("RequestManagedBy")
  updatedRequests            Request[]           @relation("RequestUpdatedBy")
  createdAssessmentForms     AssessmentForm[]    @relation("AssessmentFormCreatedBy")
  updatedAssessmentForms     AssessmentForm[]    @relation("AssessmentFormUpdatedBy")
  traineeAssessmentForms     AssessmentForm[]    @relation("AssessmentFormTrainee")
  approvedAssessmentForms    AssessmentForm[]    @relation("AssessmentFormApprovedBy")
  assessedAssessmentSections AssessmentSection[] @relation("AssessmentSectionAssessedBy")
  createdAssessmentValues    AssessmentValue[]   @relation("AssessmentValueCreatedBy")

  @@index([deletedAt])
  @@map("User")
}

model Role {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  createdById String?      @db.Uuid
  updatedById String?      @db.Uuid
  deletedById String?      @db.Uuid
  isActive    ActiveStatus @default(ACTIVE)
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?        @relation("RoleDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  users       User[]
  permissions Permission[] @relation("PermissionToRole")

  @@index([deletedAt])
  @@map("Role")
}

model Permission {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  method      HttpMethod
  path        String
  name        String
  module      String
  description String?
  createdById String?      @db.Uuid
  updatedById String?      @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  deletedById String?      @db.Uuid
  viewModule  String?      @default("")
  viewName    String?      @default("")
  isActive    ActiveStatus @default(ACTIVE)
  createdBy   User?        @relation("PermissionCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy   User?        @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy   User?        @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  roles       Role[]       @relation("PermissionToRole")

  @@index([deletedAt])
  @@map("Permission")
}

model TrainerProfile {
  userId              String    @id @db.Uuid
  specialization      String
  certificationNumber String
  yearsOfExp          Int?      @default(0)
  bio                 String?
  createdById         String?   @db.Uuid
  updatedById         String?   @db.Uuid
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt
  deletedAt           DateTime?
  deletedById         String?   @db.Uuid
  createdBy           User?     @relation("TrainerCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy           User?     @relation("TrainerDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy           User?     @relation("TrainerUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  user                User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([deletedAt])
  @@map("Trainer_Profile")
}

model TraineeProfile {
  userId         String    @id @db.Uuid
  dob            DateTime  @db.Date
  enrollmentDate DateTime? @db.Date
  trainingBatch  String
  passportNo     String
  nation         String?
  createdById    String?   @db.Uuid
  updatedById    String?   @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?
  deletedById    String?   @db.Uuid
  createdBy      User?     @relation("TraineeCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy      User?     @relation("TraineeDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy      User?     @relation("TraineeUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([deletedAt])
  @@map("Trainee_Profile")
}

model Department {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @unique
  description   String?
  headUserId    String?        @db.Uuid
  createdById   String?        @db.Uuid
  updatedById   String?        @db.Uuid
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime?
  deletedById   String?        @db.Uuid
  isActive      ActiveStatus   @default(ACTIVE)
  code          String         @unique
  courses       Course[]
  createdBy     User?          @relation("DeptCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy     User?          @relation("DeptDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  headUser      User?          @relation("DepartmentHead", fields: [headUserId], references: [id], onUpdate: NoAction)
  updatedBy     User?          @relation("DeptUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  templateForms TemplateForm[]
  users         User[]         @relation("DepartmentMembers")

  @@index([deletedAt])
  @@map("Department")
}

model Course {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  departmentId    String           @db.Uuid
  name            String
  description     String?
  code            String           @unique
  maxNumTrainee   Int
  venue           String?
  note            String?
  passScore       Float?
  startDate       DateTime         @db.Date
  endDate         DateTime         @db.Date
  level           CourseLevel
  status          CourseStatus     @default(PLANNED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  deletedAt       DateTime?
  createdById     String?          @db.Uuid
  updatedById     String?          @db.Uuid
  deletedById     String?          @db.Uuid
  createdBy       User?            @relation("CourseCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy       User?            @relation("CourseDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  department      Department       @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy       User?            @relation("CourseUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  subjects        Subject[]
  assessmentForms AssessmentForm[]

  @@index([departmentId])
  @@index([deletedAt])
  @@map("Course")
}

model Subject {
  id              String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId        String              @db.Uuid
  name            String
  code            String              @unique
  description     String?
  method          SubjectMethod
  duration        Int?
  type            SubjectType
  roomName        String?
  remarkNote      String?
  timeSlot        String?
  isSIM           Boolean             @default(false)
  passScore       Float?
  startDate       DateTime            @db.Date
  status          SubjectStatus       @default(PLANNED)
  endDate         DateTime            @db.Date
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  deletedAt       DateTime?
  createdById     String?             @db.Uuid
  updatedById     String?             @db.Uuid
  deletedById     String?             @db.Uuid
  course          Course?             @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy       User?               @relation("SubjectCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  deletedBy       User?               @relation("SubjectDeletedBy", fields: [deletedById], references: [id], onUpdate: NoAction)
  updatedBy       User?               @relation("SubjectUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  enrollments     SubjectEnrollment[]
  instructors     SubjectInstructor[]
  assessmentForms AssessmentForm[]

  @@index([courseId])
  @@index([deletedAt])
  @@map("Subject")
}

model SubjectInstructor {
  trainerUserId String                @db.Uuid
  subjectId     String                @db.Uuid
  roleInSubject SubjectInstructorRole
  createdAt     DateTime              @default(now())
  subject       Subject               @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trainer       User                  @relation(fields: [trainerUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([trainerUserId, subjectId])
  @@index([subjectId])
  @@map("Subject_Instructor")
}

model SubjectEnrollment {
  traineeUserId  String                  @db.Uuid
  subjectId      String                  @db.Uuid
  enrollmentDate DateTime                @db.Date
  batchCode      String
  status         SubjectEnrollmentStatus @default(ENROLLED)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @default(now()) @updatedAt
  subject        Subject                 @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trainee        User                    @relation(fields: [traineeUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([traineeUserId, subjectId])
  @@index([subjectId])
  @@map("Subject_Enrollment")
}

model AssessmentForm {
  id              String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  templateId      String              @db.Uuid
  name            String              @db.VarChar(255)
  subjectId       String?             @db.Uuid
  courseId        String?             @db.Uuid
  occuranceDate   DateTime            @db.Date
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  createdById     String              @db.Uuid
  updatedById     String              @db.Uuid
  traineeId       String              @db.Uuid
  status          AssessmentStatus    @default(NOT_STARTED)
  submittedAt     DateTime?
  comment         String?             @db.VarChar(1000)
  approvedById    String?             @db.Uuid
  approvedAt      DateTime?
  isTraineeLocked Boolean             @default(true)
  resultScore     Float?
  resultText      AssessmentResult?
  pdfUrl          String?             @db.VarChar(500)
  createdBy       User                @relation("AssessmentFormCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy       User                @relation("AssessmentFormUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  trainee         User                @relation("AssessmentFormTrainee", fields: [traineeId], references: [id], onUpdate: NoAction)
  approvedBy      User?               @relation("AssessmentFormApprovedBy", fields: [approvedById], references: [id], onUpdate: NoAction)
  template        TemplateForm        @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject         Subject?            @relation(fields: [subjectId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  course          Course?             @relation(fields: [courseId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  requests        Request[]
  sections        AssessmentSection[]

  @@index([createdById])
  @@index([updatedById])
  @@index([templateId])
  @@index([subjectId])
  @@index([courseId])
  @@index([traineeId])
  @@index([approvedById])
  @@index([status])
  @@index([occuranceDate])
  @@map("Assessment_Form")
}

model AssessmentSection {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assessmentFormId  String                  @db.Uuid
  assessedById      String?                 @db.Uuid
  templateSectionId String                  @db.Uuid
  createdAt         DateTime                @default(now())
  status            AssessmentSectionStatus @default(REQUIRED_ASSESSMENT)
  assessmentForm    AssessmentForm          @relation(fields: [assessmentFormId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assessedBy        User?                   @relation("AssessmentSectionAssessedBy", fields: [assessedById], references: [id], onUpdate: NoAction)
  templateSection   TemplateSection         @relation(fields: [templateSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  values            AssessmentValue[]

  @@index([assessmentFormId])
  @@index([assessedById])
  @@index([templateSectionId])
  @@index([status])
  @@map("Assessment_Section")
}

model Request {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requestType     RequestType
  createdByUserId String           @db.Uuid
  severity        RequestSeverity?
  title           String?
  description     String?
  actionsTaken    String?
  isAnonymous     Boolean          @default(false)
  status          RequestStatus    @default(CREATED)
  managedByUserId String?          @db.Uuid
  response        String?
  assessmentId    String?          @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  updatedById     String?          @db.Uuid
  createdBy       User             @relation("RequestCreatedBy", fields: [createdByUserId], references: [id], onUpdate: NoAction)
  managedBy       User?            @relation("RequestManagedBy", fields: [managedByUserId], references: [id], onUpdate: NoAction)
  updatedBy       User?            @relation("RequestUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  assessment      AssessmentForm?  @relation(fields: [assessmentId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([requestType])
  @@index([status])
  @@index([createdByUserId])
  @@index([managedByUserId])
  @@index([createdAt])
  @@map("Request")
}

model GlobalField {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label        String        @db.VarChar(255)
  fieldName    String        @db.VarChar(255)
  fieldType    FieldType
  roleRequired RoleRequired?
  options      Json?
  parentId     String?       @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  createdById  String?       @db.Uuid
  updatedById  String?       @db.Uuid
  createdBy    User?         @relation("GlobalFieldCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  parent       GlobalField?  @relation("GlobalFieldHierarchy", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children     GlobalField[] @relation("GlobalFieldHierarchy")
  updatedBy    User?         @relation("GlobalFieldUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@index([parentId])
  @@index([fieldType])
  @@index([createdById])
  @@index([updatedById])
  @@map("Global_Field")
}

model TemplateForm {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  description     String?
  version         Int               @default(1)
  departmentId    String            @db.Uuid
  createdByUserId String            @db.Uuid
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  templateContent String?           @db.VarChar(500)
  templateSchema  Json?
  createdByUser   User              @relation("TemplateFormCreatedBy", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department      Department        @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sections        TemplateSection[]
  assessmentForms AssessmentForm[]

  @@index([departmentId])
  @@index([createdByUserId])
  @@index([isActive])
  @@map("Template_Form")
}

model TemplateSection {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  templateId         String              @db.Uuid
  label              String              @db.VarChar(255)
  displayOrder       Int
  editBy             EditByRole
  roleInSubject      RoleInSubject?
  isSubmittable      Boolean             @default(false)
  isToggleDependent  Boolean             @default(false)
  fields             TemplateField[]
  assessmentSections AssessmentSection[]
  template           TemplateForm        @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([templateId])
  @@index([displayOrder])
  @@map("Template_Section")
}

model TemplateField {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sectionId        String            @db.Uuid
  label            String            @db.VarChar(255)
  fieldName        String            @db.VarChar(255)
  fieldType        FieldType
  roleRequired     RoleRequired?
  options          Json?
  displayOrder     Int
  parentId         String?           @db.Uuid
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  createdById      String?           @db.Uuid
  updatedById      String?           @db.Uuid
  createdBy        User?             @relation("TemplateFieldCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)
  parent           TemplateField?    @relation("TemplateFieldHierarchy", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children         TemplateField[]   @relation("TemplateFieldHierarchy")
  section          TemplateSection   @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedBy        User?             @relation("TemplateFieldUpdatedBy", fields: [updatedById], references: [id], onUpdate: NoAction)
  assessmentValues AssessmentValue[]

  @@unique([sectionId, fieldName])
  @@index([sectionId])
  @@index([parentId])
  @@index([displayOrder])
  @@index([createdById])
  @@index([updatedById])
  @@map("Template_Field")
}

model AssessmentValue {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assessmentSectionId String            @db.Uuid
  templateFieldId     String            @db.Uuid
  answerValue         String?           @db.VarChar(2000)
  createdAt           DateTime          @default(now())
  createdById         String            @db.Uuid
  assessmentSection   AssessmentSection @relation(fields: [assessmentSectionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  templateField       TemplateField     @relation(fields: [templateFieldId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdBy           User              @relation("AssessmentValueCreatedBy", fields: [createdById], references: [id], onUpdate: NoAction)

  @@index([assessmentSectionId])
  @@index([templateFieldId])
  @@index([createdById])
  @@map("Assessment_Value")
}

enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

enum RequestType {
  SAFETY_REPORT
  INCIDENT_REPORT
  FEEDBACK_REPORT
  ASSESSMENT_APPROVAL_REQUEST
}

enum RequestSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequestStatus {
  CREATED
  ACKNOWLEDGED
  RESOLVED
  APPROVED
  REJECTED
  CANCELLED
}

enum GenderStatus {
  MALE
  FEMALE
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
}

enum SubjectInstructorRole {
  PRIMARY_INSTRUCTOR
  EXAMINER
  ASSESSMENT_REVIEWER
  ASSISTANT_INSTRUCTOR
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  PLANNED
  ON_GOING
  COMPLETED
  ARCHIVED
}

enum SubjectStatus {
  PLANNED
  ON_GOING
  COMPLETED
  ARCHIVED
}

enum SubjectMethod {
  E_LEARNING
  CLASSROOM
  ERO
}

enum SubjectType {
  UNLIMIT
  RECURRENT
}

enum SubjectEnrollmentStatus {
  ENROLLED
  ON_GOING
  CANCELLED
  FINISHED
}

enum AssessmentStatus {
  NOT_STARTED
  ON_GOING
  SIGNATURE_PENDING
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum AssessmentResult {
  PASS
  FAIL
  NOT_APPLICABLE
}

enum AssessmentSectionStatus {
  REQUIRED_ASSESSMENT
  DRAFT
  REJECTED
  APPROVED
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
}

enum FieldType {
  TEXT
  IMAGE
  PART
  TOGGLE
  SECTION_CONTROL_TOGGLE
  VALUE_LIST
  SIGNATURE_DRAW
  SIGNATURE_IMG
  FINAL_SCORE_TEXT
  FINAL_SCORE_NUM
  CHECK_BOX
}

enum RoleRequired {
  TRAINEE
  TRAINER
}

enum EditByRole {
  TRAINEE
  TRAINER
}

enum RoleInSubject {
  ASSESSMENT_REVIEWER
  EXAMINER
}
