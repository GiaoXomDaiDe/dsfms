{
	"info": {
		"_postman_id": "forgot-password-test-collection",
		"name": "DSFMS - Forgot Password API Tests",
		"description": "Collection ƒë·ªÉ test forgot password v√† reset password functionality",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Forgot Password - Valid Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"reset link has been sent\");",
							"});",
							"",
							"console.log(\"‚úÖ Forgot password request sent successfully\");",
							"console.log(\"üìß Check Gmail inbox for reset email\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"michael.brown@admin.com\",\n  \"magicLink\": \"http://localhost:3000/auth/reset-password\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/forgot-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"forgot-password"
					]
				},
				"description": "Test forgot password v·ªõi email admin c√≥ trong database"
			}
		},
		{
			"name": "2. Forgot Password - Nonexistent Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Response has success message (security)\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"reset link has been sent\");",
							"});",
							"",
							"console.log(\"‚úÖ Non-existent email handled securely\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"magicLink\": \"http://localhost:3000/auth/reset-password\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/forgot-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"forgot-password"
					]
				},
				"description": "Test v·ªõi email kh√¥ng t·ªìn t·∫°i - v·∫´n tr·∫£ v·ªÅ success message v√¨ security"
			}
		},
		{
			"name": "3. Reset Password - Valid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Password reset successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"successfully\");",
							"});",
							"",
							"console.log(\"‚úÖ Password reset successful\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"token\": \"PASTE_JWT_TOKEN_FROM_EMAIL_HERE\",\n  \"newPassword\": \"NewPassword@123\",\n  \"confirmPassword\": \"NewPassword@123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/reset-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"reset-password"
					]
				},
				"description": "Reset password v·ªõi JWT token t·ª´ email. C·∫ßn copy token t·ª´ email v√†o ƒë√¢y."
			}
		},
		{
			"name": "4. Reset Password - Invalid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.eql(401);",
							"});",
							"",
							"pm.test(\"Error message about invalid token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Invalid\");",
							"});",
							"",
							"console.log(\"‚úÖ Invalid token handled correctly\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"token\": \"invalid_jwt_token_here\",\n  \"newPassword\": \"NewPassword@123\",\n  \"confirmPassword\": \"NewPassword@123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/reset-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"reset-password"
					]
				},
				"description": "Test v·ªõi JWT token kh√¥ng h·ª£p l·ªá"
			}
		},
		{
			"name": "5. Reset Password - Password Mismatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Error about password mismatch\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.include(\"do not match\");",
							"});",
							"",
							"console.log(\"‚úÖ Password mismatch handled correctly\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"token\": \"PASTE_VALID_JWT_TOKEN_HERE\",\n  \"newPassword\": \"NewPassword@123\",\n  \"confirmPassword\": \"DifferentPassword@123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/reset-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"reset-password"
					]
				},
				"description": "Test v·ªõi password v√† confirm password kh√¥ng kh·ªõp"
			}
		},
		{
			"name": "6. Test Login After Reset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Login successful with new password\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token).to.exist;",
							"    pm.expect(jsonData.refresh_token).to.exist;",
							"});",
							"",
							"// Save tokens for future requests",
							"if (pm.response.json().access_token) {",
							"    pm.environment.set(\"access_token\", pm.response.json().access_token);",
							"    pm.environment.set(\"refresh_token\", pm.response.json().refresh_token);",
							"}",
							"",
							"console.log(\"‚úÖ Login with new password successful\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"michael.brown@admin.com\",\n  \"password\": \"NewPassword@123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Test login v·ªõi password m·ªõi sau khi reset th√†nh c√¥ng"
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"üöÄ Starting DSFMS Forgot Password API Test\");",
					"console.log(\"üìß Make sure Gmail SMTP is configured correctly\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:4000",
			"type": "string"
		}
	]
}