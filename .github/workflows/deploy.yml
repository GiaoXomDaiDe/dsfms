name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create .env file
        run: echo "${{secrets.ENV_NESTJS}}" > .env

      - name: Build docker image
        run: docker build -t thisishuy/dsfms:v0 .

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push docker image to Docker Hub
        run: docker push thisishuy/dsfms:v0

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on push to main (not on PR)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          timeout: 300s
          script: |
            echo "Starting Docker deployment..."

            # Login to Docker Hub on server
            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest Docker image
            echo "Pulling latest Docker image..."
            docker pull thisishuy/dsfms:v0

            # Stop and remove existing container
            echo "Stopping and removing existing container..."
            docker stop dsfms
            docker rm dsfms

            # Start new container
            echo "Starting new container..."
            docker run -dp 4000:4000 --name dsfms --restart unless-stopped thisishuy/dsfms:v0

            #Delete old images to free up space
            echo "Cleaning up old Docker images..."
            docker image prune -f

            # Wait for a few seconds to ensure the container is up
            sleep 5
            docker logs dsfms --tail 50

            echo "Docker deployment completed successfully!"

  notify-success:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    steps:
      - name: Notify Deployment Success
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "#28a745"
          username: "DSFMS Bot"
          message: "**DEPLOYMENT SUCCESSFUL** - Repository: ${{ github.repository }} - Branch: ${{ github.ref_name }} - Triggered by: ${{ github.actor }} - Status: Production deployment completed successfully - Application is now live and ready for use"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure()
    steps:
      - name: Notify Deployment Failure
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "#dc3545"
          username: "DSFMS Bot"
          message: "**DEPLOYMENT FAILED** - Repository: ${{ github.repository }} - Branch: ${{ github.ref_name }} - Triggered by: ${{ github.actor }} - Status: Deployment failed - Please review logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  notify-cancelled:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: cancelled()
    steps:
      - name: Notify Deployment Cancelled
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "#ffc107"
          username: "DSFMS Bot"
          message: "**DEPLOYMENT CANCELLED** - Repository: ${{ github.repository }} - Branch: ${{ github.ref_name }} - Triggered by: ${{ github.actor }} - Status: Deployment was cancelled - View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
