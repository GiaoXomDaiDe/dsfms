name: Deploy

on:
  push:
    branches:
      - main
  # Only trigger on completed pull requests (when PR is merged to main)
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    # Only run when push to main OR when PR is merged to main
    if: github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create .env file
        run: echo "${{secrets.ENV_NESTJS}}" > .env

      - name: Build docker image
        run: docker build -t thisishuy/dsfms:v0 .

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push docker image to Docker Hub
        run: docker push thisishuy/dsfms:v0

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on push to main OR when PR is merged to main
    if: github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')

    steps:
      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          timeout: 300s
          script: |
            echo "Starting Docker deployment..."

            SUDO_PASS="${{ secrets.SUDO_PASSWORD }}"
            run_with_sudo() {
              if [ -n "${SUDO_PASS}" ]; then
                printf '%s\n' "${SUDO_PASS}" | sudo -S "$@"
              else
                sudo "$@"
              fi
            }

            if [ -z "${SUDO_PASS}" ]; then
              if ! sudo -n true 2>/dev/null; then
                echo "ERROR: SUDO_PASSWORD secret not set and remote sudo requires a password."
                exit 1
              fi
            fi

            # Navigate to project directory and pull latest code
            echo "Updating source code..."
            cd ~/dsfms || { echo "Project directory not found, cloning..."; git clone https://github.com/GiaoXomDaiDe/dsfms.git ~/dsfms; cd ~/dsfms; }
            git fetch --all
            git reset --hard origin/main
            echo "Source code updated to latest version"

            # DEBUG: Check current .env file
            echo "DEBUG: Current directory: $(pwd)"
            if [ ! -f .env ]; then
              echo "WARNING: .env file not found"
            else
              echo "DEBUG: .env file detected with $(wc -l < .env) lines"
            fi

            # Ensure maintenance script is executable and run pre-deploy cleanup
            MAINTENANCE_SCRIPT="$(pwd)/scripts/maintenance/disk-maintenance.sh"
            if [ -f "${MAINTENANCE_SCRIPT}" ]; then
              run_with_sudo chmod +x "${MAINTENANCE_SCRIPT}"
              echo "Running disk maintenance prior to deployment..."
              run_with_sudo env APP_LOG_ROOT="$(pwd)/logs" "${MAINTENANCE_SCRIPT}" --once || echo "Maintenance script completed with warnings"

              echo "Configuring cron job for ongoing maintenance..."
              CRON_COMMENT="# dsfms-disk-maintenance"
              CRON_JOB="0 2 * * * APP_LOG_ROOT=$(pwd)/logs ${MAINTENANCE_SCRIPT} --cron >> /var/log/dsfms-disk-maintenance.log 2>&1 ${CRON_COMMENT}"
              TMP_CRON=$(mktemp)
              run_with_sudo bash -c "crontab -l 2>/dev/null | grep -v '${CRON_COMMENT}' > ${TMP_CRON} || true"
              echo "${CRON_JOB}" | run_with_sudo tee -a "${TMP_CRON}" >/dev/null
              run_with_sudo crontab "${TMP_CRON}"
              run_with_sudo rm -f "${TMP_CRON}"
            else
              echo "WARNING: Maintenance script not found at ${MAINTENANCE_SCRIPT}"
            fi

            echo "Checking available disk space before pulling Docker image..."
            AVAILABLE_GB=$(df --output=avail -BG / | tail -1 | tr -dc '0-9')
            if [ "${AVAILABLE_GB}" -lt 2 ]; then
              echo "WARNING: Less than 2GB free on root filesystem (${AVAILABLE_GB}G available)."
            else
              echo "Available disk space: ${AVAILABLE_GB}G"
            fi

            # Login to Docker Hub on server
            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull latest Docker image
            echo "Pulling latest Docker image..."
            docker pull thisishuy/dsfms:v0

            # Stop and remove existing container (ignore errors if not exists)
            echo "Stopping and removing existing container..."
            docker stop dsfms 2>/dev/null || true
            docker rm dsfms 2>/dev/null || true

            # Kill any process using port 4000 (just in case)
            echo "Ensuring port 4000 is free..."
            run_with_sudo fuser -k 4000/tcp 2>/dev/null || true

            # Wait a moment for cleanup
            sleep 3

            # DEBUG: Final check before starting container
            echo "DEBUG: Final .env file check:"
            echo "File path: $(pwd)/.env"
            ls -la .env 2>/dev/null || echo "WARNING: .env missing"

            # Start new container with explicit .env file
            echo "Starting new container..."
            docker run -d \
              --name dsfms \
              --restart unless-stopped \
              -p 4000:4000 \
              --env-file $(pwd)/.env \
              thisishuy/dsfms:v0

            #Delete old images to free up space
            echo "Cleaning up old Docker images..."
            docker image prune -f

            # Wait for container to start and health check
            echo "Performing health check..."
            sleep 10

            # Check if container is running
            if docker ps | grep -q dsfms; then
              echo "Container is running successfully"
              echo "Container status:"
              docker ps | grep dsfms
              echo "Recent logs:"
              docker logs dsfms --tail 20
              
              # DEBUG: Check environment variables inside container
              echo "DEBUG: Environment variables inside container:"
              docker exec dsfms env | grep -E "(ACADEMIC|ADMIN|DEPARTMENT)" 2>/dev/null || echo "Cannot access container environment"
              
              # Test application endpoint if possible
              echo "Testing application..."
              curl -f http://localhost:4000/health 2>/dev/null || echo "Health check endpoint not responding yet (this is normal during startup)"
            else
              echo "Container failed to start"
              echo "All running containers:"
              docker ps -a
              echo "Container logs:"
              docker logs dsfms --tail 50 2>/dev/null || echo "No logs available"
              
              # DEBUG: Check if .env file is being read
              echo "DEBUG: Checking .env file on host:"
              echo "File exists: $(test -f .env && echo 'YES' || echo 'NO')"
              echo "File size: $(stat -c%s .env 2>/dev/null || echo 'N/A')"
              echo "ACADEMIC_DEPARTMENT_MIDDLE_NAME value:"
              grep "ACADEMIC_DEPARTMENT_MIDDLE_NAME" .env || echo "NOT FOUND"
              exit 1
            fi

            echo "Docker deployment completed successfully!"

  notify-success:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    steps:
      - name: Notify Deployment Success
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "#28a745"
          username: "DSFMS Bot"
          message: "**DEPLOYMENT SUCCESSFUL** - Repository: ${{ github.repository }} - Branch: ${{ github.ref_name }} - Triggered by: ${{ github.actor }} - Status: Production deployment completed successfully - Application is now live and ready for use"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure()
    steps:
      - name: Notify Deployment Failure
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "#dc3545"
          username: "DSFMS Bot"
          message: "**DEPLOYMENT FAILED** - Repository: ${{ github.repository }} - Branch: ${{ github.ref_name }} - Triggered by: ${{ github.actor }} - Status: Deployment failed - Please review logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  notify-cancelled:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: cancelled()
    steps:
      - name: Notify Deployment Cancelled
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "#ffc107"
          username: "DSFMS Bot"
          message: "**DEPLOYMENT CANCELLED** - Repository: ${{ github.repository }} - Branch: ${{ github.ref_name }} - Triggered by: ${{ github.actor }} - Status: Deployment was cancelled - View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
